/*
 * Object Oriented CAN example for Teensy 3.6 with Dual CAN buses 
 * By Collin Kidder. Based upon the work of Pawelsky and Teachop
 * 
 * Both buses are set to 500k to show things with a faster bus.
 * The reception of frames in this example is done via callbacks
 * to an object rather than polling. Frames are delivered as they come in.
 * 
 * ADDED: Functionality with the Color 320x240 TFT Display, ILI9341 Controller Chip
 * Basic output that displays CAN ID's and raw data from those ID's
 * Portions commented out are optional serial ouputs to see more/customized data
 * Libraries usable for the Display:
 * https://github.com/PaulStoffregen/ILI9341_t3
 * https://github.com/PaulStoffregen/ILI9341_fonts
 * More information about display at:
 * https://www.pjrc.com/store/display_ili9341.html
 * John Maag
 * 4/16/17
 */

#include <FlexCAN.h>
#include <SPI.h>
//
#include <ILI9341_t3.h>
//
#include <font_ChanceryItalic.h>
#include <font_ComicSansMSBold.h>
#include <font_ComicSansMS.h>

//
//
//Display Defines
#define TFT_DC 21
#define TFT_CS 15
// Use hardware SPI (#13, #12, #11) and the above for CS/DC
ILI9341_t3 tft = ILI9341_t3(TFT_CS, TFT_DC);
//
//

#ifndef __MK66FX1M0__
  #error "Teensy 3.6 with dual CAN bus is required to run this example"
#endif

static CAN_message_t msg0,msg1;

elapsedMillis RXtimer;
elapsedMillis LEDtimer;
uint32_t RXCount = 0;
boolean displayCAN = true;
const uint8_t redLEDpin = 2;
boolean redLEDstate;
int IDcount;
int IDArray[10] = {0,0,0,0,0,0,0,0,0,0};
int containsID;
int CANflag = 0;

class CANClass : public CANListener 
{
public:
   void printFrame(CAN_message_t &frame, int mailbox);
   void gotFrame(CAN_message_t &frame, int mailbox); //overrides the parent version so we can actually do something
};

void CANClass::printFrame(CAN_message_t &frame, int mailbox)
{

  
  if(displayCAN){
   //Display Code

    for(int i = 0; i<7; i++){
      if(frame.id == IDArray[i]){
        containsID = i;
      }
    }
    if((IDcount<10) && (containsID == -1)){
      IDArray[IDcount] = frame.id;
      containsID = IDcount;
      IDcount ++;
      Serial.print("@@@");
      Serial.println(containsID);
    }
    if(containsID != -1){
      int pixel = containsID*20+1;
      Serial.print(IDcount);
      Serial.print("**");
      //
      //
      tft.setCursor(1, pixel);
      tft.print(frame.id, HEX);
      tft.print(" ");
      for (int c = 0; c < frame.len; c++) 
      {
        tft.print(frame.buf[c], HEX);
      }
      //
      //
      containsID = -1;
       Serial.print(" ID: ");
        Serial.println(frame.id, HEX);
    }
   containsID = -1;


   //
   //Serial.print(mailbox);
   //Serial.print(" ID: ");
   //Serial.print(" Time ");
   //Serial.print(micros());
   uint8_t Priority = (frame.id & 0x1C000000)>>26;
   //Serial.print(Priority);
   //Serial.println(frame.id, HEX);
   uint8_t PF = (frame.id & 16711680)>>16;
   //Serial.print(PF, HEX);
   //Serial.print(" PGN ");
    
   if (PF < 240){
    //peer to peer
    uint8_t DA = (frame.id & 0x000FF00)>>8;
    uint32_t PGN = (frame.id & 67043328)>>8;
     //Serial.print(PGN, HEX);
     //Serial.print(" DA ");
     //Serial.print(DA, HEX);
   }
   else{
    uint32_t PGN = (frame.id & 67108608)>>8;
     //Serial.print(PGN, HEX);
   }
   
  /*
    Serial.print(" Data: ");
   for (int c = 0; c < frame.len; c++) 
   {
      Serial.print(frame.buf[c], HEX);
      Serial.write(' ');
   }
   
   Serial.println();
   */
  }
   RXCount++;
 
}

void CANClass::gotFrame(CAN_message_t &frame, int mailbox)
{
    if(CANflag == 0){
      //
      tft.fillScreen(ILI9341_BLACK);
      CANflag = 1;
      //
    }
    printFrame(frame, mailbox);
}

CANClass CANClass0;
CANClass CANClass1;

// -------------------------------------------------------------
void setup(void)
{
  delay(1000);
  Serial.println(F("Hello Teensy 3.6 dual CAN Test With Objects."));

  //
  //
  //Display setup
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(ILI9341_BLACK);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(2);
  tft.println("Waiting for CAN Messages..");
  tft.setCursor(0, 10);
  IDcount = 0;
  containsID = -1;
  //
  //

  
  Can0.begin(250000);  
  Can1.begin(250000);
  Can0.attachObj(&CANClass0);
  Can1.attachObj(&CANClass1);
  
  
  CAN_filter_t allPassFilter;
  allPassFilter.id=0;
  allPassFilter.ext=1;
  allPassFilter.rtr=0;

  //leave the first 4 mailboxes to use the default filter. Just change the higher ones
  for (uint8_t filterNum = 4; filterNum < 16;filterNum++){
    Can0.setFilter(allPassFilter,filterNum); 
    Can1.setFilter(allPassFilter,filterNum); 
  }
  for (uint8_t filterNum = 0; filterNum < 16;filterNum++){
     CANClass0.attachMBHandler(filterNum);
     CANClass1.attachMBHandler(filterNum);
  }
  //CANClass0.attachGeneralHandler();
  //CANClass1.attachGeneralHandler();
  
}

// -------------------------------------------------------------
void loop(void)
{
  if (RXtimer > 10000){
    Serial.println("Total Received Messages in 10 Sec:");
    Serial.println(RXCount);
    //displayCAN = !displayCAN;
    //
    //
    tft.fillScreen(ILI9341_BLACK);
    tft.setCursor(5, 220);
    tft.print("Total Mx Rcvd in 10s: ");
    tft.print(RXCount);
    //
    //
    IDcount = 0;
    containsID = -1;
    for(int i = 0; i<10;i++){
      IDArray[i] = 0;
    }
    RXtimer = 0;
    RXCount=0;
  }
  if (LEDtimer >250){
    LEDtimer = 0;
    redLEDstate = !redLEDstate;
    digitalWrite(redLEDpin, redLEDstate);
  }
}

